swagger: "2.0"
info:
  title: ServEngGr4 API
  description: API description in Markdown.
  version: 1.0.0
host: localhost:8001/api
schemes:
  - http

# Added by API Auto Mocking Plugin
#host: virtserver.swaggerhub.com
#basePath: /reischl_franz/ServEngGr4/1.0.0
#schemes:
#  - https


paths:
  /cars:
    get:
      summary: Returns a list of cars.
      description: No
      operationId: getAllCars
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Car'
    post:
      summary: Add a new car
      operationId: addCar
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: carObject
          description: New car object to be added
          schema:
            $ref: '#/definitions/Car'
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/Car'
        400:
          description: Bad parameters, invalid input
        500:
          description: Server error while inserting
  /cars/{carid}:
    get:
      summary: Returns a single car by ID
      operationId: getSingleCar
      parameters:
        - in: path
          required: true
          name: carid
          type: integer
          format: int32
          minimum: 0
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Car'
        404:
          description: Not found
    delete:
      summary: Delete a single car by ID
      operationId: deleteCar
      parameters:
        - in: path
          required: true
          name: carid
          type: integer
          format: int32
          minimum: 0
      produces:
        - application/json
      responses:
        204:
          description: No content, successfully removed
        404:
          description: Not found
        500:
          description: Server error while deleting
  /drivers:
    get:
      summary: Returns a list of drivers.
      description: No
      operationId: getAllDrivers
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Driver'
    post:
      summary: Add a new driver
      operationId: addDriver
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: driverObject
          description: New driver object to be added
          schema:
            $ref: '#/definitions/Driver'
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/Driver'
        400:
          description: Bad parameters, invalid input
        500:
          description: Server error while inserting
  /drivers/{driverid}:
    get:
      summary: Returns a single driver by ID
      operationId: getSingleDriver
      parameters:
        - in: path
          required: true
          name: driverid
          type: integer
          format: int32
          minimum: 0
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Driver'
        404:
          description: Not found
    delete:
      summary: Delete a single driver by ID
      operationId: deleteDriver
      parameters:
        - in: path
          required: true
          name: driverid
          type: integer
          format: int32
          minimum: 0
      produces:
        - application/json
      responses:
        204:
          description: No content, successfully removed
        404:
          description: Not found
        500:
          description: Server error while deleting
  /guests:
    get:
      summary: Returns a list of guests.
      description: No
      operationId: getAllGuests
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Guest'
    post:
      summary: Add a new guest
      operationId: addGuest
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: guestObject
          description: New guest object to be added
          schema:
            $ref: '#/definitions/Guest'
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/Guest'
        400:
          description: Bad parameters, invalid input
        500:
          description: Server error while inserting
  /guests/{guestid}:
    get:
      summary: Returns a single guest by ID
      operationId: getSingleGuest
      parameters:
        - in: path
          required: true
          name: guestid
          type: integer
          format: int32
          minimum: 0
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Guest'
        404:
          description: Not found
    delete:
      summary: Delete a single guest by ID
      operationId: deleteGuest
      parameters:
        - in: path
          required: true
          name: guestid
          type: integer
          format: int32
          minimum: 0
      produces:
        - application/json
      responses:
        204:
          description: No content, successfully removed
        404:
          description: Not found
        500:
          description: Server error while deleting
  /guests/{guestid}/pickup:
    post:
      summary: Adds a pickup trip for a guest by ID
      parameters:
        - in: path
          required: true
          name: guestid
          type: integer
          format: int32
          minimum: 0
        - in: body
          name: tripid
          required: true
          schema:
            type: object
            properties:
              tripid:
                type: integer
                format: int32
                description: The trip ID
                minimum: 0
                example: 44
      responses:
        201:
          description: Created
        400:
          description: Bad Request
        404:
          description: Not found
  /guests/{guestid}/dropoff:
    post:
      summary: Adds a dropoff trip for a guest by ID
      parameters:
        - in: path
          required: true
          name: guestid
          type: integer
          format: int32
          minimum: 0
        - in: body
          name: tripid
          required: true
          schema:
            type: object
            properties:
              tripid:
                type: integer
                format: int32
                description: The trip ID
                minimum: 0
                example: 45
      responses:
        201:
          description: Created
        400:
          description: Bad Request
        404:
          description: Not found
  /trips:
    get:
      summary: Returns a list of trips.
      operationId: listTrips
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Trip'
  /trips/{tripId}:
    get:
      summary: Returns a single trip by ID
      operationId: getSingleTrip
      parameters:
        - in: path
          required: true
          name: tripId
          type: integer
          format: int32
          minimum: 0
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Trip'
        404:
          description: Not found

definitions:
  Car:
    type: object
    required:
      - carname
      - carpassengers
    properties:
      carid:
        type: integer
        format: int32
        example: 55
        readOnly: true
      carname:
        type: string
        example: Fiat Multipla, red (and ugly)
      carpassengers:
        type: integer
        format: int32
        example: 5
  Driver:
    type: object
    required:
      - drivername
    properties:
      driverid:
        type: integer
        format: int32
        example: 17
        readOnly: true
      drivername:
        type: string
        example: Juan Julios, Junior
  Guest:
    type: object
    required:
      - guestname
    properties:
      guestid:
        type: integer
        format: int32
        example: 241
        readOnly: true
      guestname:
        type: string
        example: Lady Trent, Isabella Camhurst
  Trip:
    type: object
    required:
      - direction
      - driverId
      - carId
      - date
      - timestart
      - timearrival
    properties:
      tripId:
        type: integer
        format: int32
        example: 3
        readOnly: true
      direction:
        type: string
        enum:
          - Hotel -> Airport
          - Airport -> Hotel
      driver:
        $ref: '#/definitions/Driver'
      car:
        $ref: '#/definitions/Car'
      passengers:
        type: array
        readOnly: true
        items:
          $ref: '#/definitions/Guest'
      date:
        type: number
        description: Date of transport
        format: 'date'
        example: '2020-02-17'
      timestart:
        type: number
        format: 'time'
        example: '13:30'
      timearrival:
        type: number
        format: 'time'
        example: '13:51'
      triptime:
        type: number
        format: int32
        readOnly: true
        description: Time for trip in seconds
        example: 1260
